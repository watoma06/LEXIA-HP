# LEXIA-HP ウェブサイト - 最適化デプロイワークフロー
name: 🚀 Deploy LEXIA-HP Website

on:
  # デフォルトブランチへのプッシュで実行
  push:
    branches: ["main"]
    paths-ignore:
      - 'README.md'
      - 'PROJECT.md'
      - '.github/**'
      - 'calculator/build-wasm.*'
      - 'calculator/*.md'

  # プルリクエストでのプレビューデプロイ
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

  # 手動実行オプション
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'デプロイ環境を選択'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# GitHub Pages へのデプロイを許可するために GITHUB_TOKEN の権限を設定
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  issues: write

# 同時実行制御
concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '18'

jobs:
  # ===================================
  # コード品質チェック & テスト
  # ===================================
  quality-check:
    name: 🔍 コード品質チェック
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔍 HTMLバリデーション
        uses: Cyb3r-Jak3/html5validator-action@v7.2.0
        with:
          root: ./
          format: text
          
      - name: 📊 ファイルサイズチェック
        run: |
          echo "## 📊 ファイルサイズ分析" >> $GITHUB_STEP_SUMMARY
          echo "| ファイル | サイズ | 状態 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|------|" >> $GITHUB_STEP_SUMMARY
          
          # CSSファイルサイズチェック
          css_size=$(stat -c%s "style.css")
          css_mb=$(echo "scale=2; $css_size/1024/1024" | bc -l)
          if (( $(echo "$css_size > 500000" | bc -l) )); then
            echo "| style.css | ${css_mb}MB | ⚠️ 大きい |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| style.css | ${css_mb}MB | ✅ 良好 |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # JSファイルサイズチェック
          for js_file in script.js calculator/lexia-price-calculator.js; do
            if [ -f "$js_file" ]; then
              js_size=$(stat -c%s "$js_file")
              js_mb=$(echo "scale=2; $js_size/1024/1024" | bc -l)
              if (( $(echo "$js_size > 300000" | bc -l) )); then
                echo "| $js_file | ${js_mb}MB | ⚠️ 大きい |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| $js_file | ${js_mb}MB | ✅ 良好 |" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done

      - name: 🔗 リンクチェック
        uses: lycheeverse/lychee-action@v1.8.0
        with:
          args: --verbose --no-progress './**/*.html' './**/*.md'
          fail: false
        continue-on-error: true

  # ===================================
  # パフォーマンス最適化
  # ===================================
  optimize:
    name: ⚡ パフォーマンス最適化
    runs-on: ubuntu-latest
    needs: quality-check
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📋 キャッシュキー生成
        id: cache-key
        run: |
          key="optimized-${{ hashFiles('*.html', '*.css', '*.js', 'calculator/*.js') }}"
          echo "key=$key" >> $GITHUB_OUTPUT

      - name: 💾 最適化キャッシュ
        uses: actions/cache@v3
        with:
          path: ./optimized
          key: ${{ steps.cache-key.outputs.key }}

      - name: 🔧 Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: ⚡ CSS/JS最適化
        run: |
          # ディレクトリ作成
          mkdir -p optimized
          
          # 最適化ツールのインストール
          npm install -g cssnano-cli terser
          
          # CSS最適化
          echo "🎨 CSS最適化中..."
          cssnano style.css optimized/style.min.css
          
          # JavaScript最適化
          echo "⚡ JavaScript最適化中..."
          terser script.js -o optimized/script.min.js -c -m
          terser calculator/lexia-price-calculator.js -o optimized/lexia-price-calculator.min.js -c -m
          
          # HTMLを最適化版に更新
          echo "📝 HTML更新中..."
          cp *.html optimized/
          
          # CSS/JSパスを最適化版に置換
          cd optimized
          sed -i 's/style\.css/style.min.css/g' *.html
          sed -i 's/script\.js/script.min.js/g' *.html
          sed -i 's/calculator\/lexia-price-calculator\.js/lexia-price-calculator.min.js/g' *.html
          
          # 計算機ディレクトリもコピー（最適化版以外）
          cp -r ../calculator .
          rm -f calculator/lexia-price-calculator.js # 最適化版を使用
          
          # 最適化結果レポート
          echo "## ⚡ 最適化結果" >> $GITHUB_STEP_SUMMARY
          echo "| ファイル | 元サイズ | 最適化後 | 削減率 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|----------|----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          original_css=$(stat -c%s "../style.css")
          optimized_css=$(stat -c%s "style.min.css")
          css_reduction=$(echo "scale=1; (($original_css - $optimized_css) * 100) / $original_css" | bc -l)
          echo "| style.css | ${original_css}B | ${optimized_css}B | ${css_reduction}% |" >> $GITHUB_STEP_SUMMARY
          
          original_js=$(stat -c%s "../script.js")
          optimized_js=$(stat -c%s "script.min.js")
          js_reduction=$(echo "scale=1; (($original_js - $optimized_js) * 100) / $original_js" | bc -l)
          echo "| script.js | ${original_js}B | ${optimized_js}B | ${js_reduction}% |" >> $GITHUB_STEP_SUMMARY

      - name: 📤 最適化ファイルをアップロード
        uses: actions/upload-artifact@v3
        with:
          name: optimized-site
          path: ./optimized
          retention-days: 30

  # ===================================
  # セキュリティスキャン
  # ===================================
  security:
    name: 🔒 セキュリティスキャン
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🔍 機密情報スキャン
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # ===================================
  # デプロイ
  # ===================================
  deploy:
    name: 🚀 GitHub Pages デプロイ
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [quality-check, optimize, security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📥 最適化ファイルダウンロード
        uses: actions/download-artifact@v3
        with:
          name: optimized-site
          path: ./deploy

      - name: 🛠️ Pages設定
        uses: actions/configure-pages@v5

      - name: 📤 Pagesアーティファクトアップロード
        uses: actions/upload-pages-artifact@v3
        with:
          path: './deploy'

      - name: 🚀 GitHub Pages デプロイ
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📊 デプロイ結果通知
        run: |
          echo "## 🎉 デプロイ完了!" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⏰ デプロイ時刻: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 コミット: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # ===================================
  # プレビューデプロイ（PRの場合）
  # ===================================
  preview-deploy:
    name: 👀 プレビューデプロイ
    runs-on: ubuntu-latest
    needs: [quality-check, optimize]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📥 最適化ファイルダウンロード
        uses: actions/download-artifact@v3
        with:
          name: optimized-site
          path: ./preview

      - name: 💬 プレビューコメント
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 👀 プレビューデプロイ準備完了
            
            プルリクエスト #${{ github.event.number }} のプレビューが準備できました。
            
            ### 📊 変更内容
            - コミット: \`${{ github.event.pull_request.head.sha }}\`
            - ブランチ: \`${{ github.event.pull_request.head.ref }}\`
            
            ### ✅ 品質チェック結果
            - HTMLバリデーション: 完了
            - リンクチェック: 完了  
            - パフォーマンス最適化: 完了
            
            マージ後、本番サイトに自動デプロイされます。`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
